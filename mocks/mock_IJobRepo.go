// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "job_executors/cmd/job_management_api/model"

	mock "github.com/stretchr/testify/mock"

	pgdb "job_executors/thirdparty/pgdb"
)

// MockIJobRepo is an autogenerated mock type for the IJobRepo type
type MockIJobRepo struct {
	mock.Mock
}

type MockIJobRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJobRepo) EXPECT() *MockIJobRepo_Expecter {
	return &MockIJobRepo_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function with given fields: ctx, req
func (_m *MockIJobRepo) CreateJob(ctx context.Context, req model.JobCreateRequest) (*pgdb.Jobs, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *pgdb.Jobs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.JobCreateRequest) (*pgdb.Jobs, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.JobCreateRequest) *pgdb.Jobs); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgdb.Jobs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.JobCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJobRepo_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockIJobRepo_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.JobCreateRequest
func (_e *MockIJobRepo_Expecter) CreateJob(ctx interface{}, req interface{}) *MockIJobRepo_CreateJob_Call {
	return &MockIJobRepo_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, req)}
}

func (_c *MockIJobRepo_CreateJob_Call) Run(run func(ctx context.Context, req model.JobCreateRequest)) *MockIJobRepo_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.JobCreateRequest))
	})
	return _c
}

func (_c *MockIJobRepo_CreateJob_Call) Return(_a0 *pgdb.Jobs, _a1 error) *MockIJobRepo_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJobRepo_CreateJob_Call) RunAndReturn(run func(context.Context, model.JobCreateRequest) (*pgdb.Jobs, error)) *MockIJobRepo_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function with given fields: ctx, id
func (_m *MockIJobRepo) DeleteJob(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIJobRepo_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockIJobRepo_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIJobRepo_Expecter) DeleteJob(ctx interface{}, id interface{}) *MockIJobRepo_DeleteJob_Call {
	return &MockIJobRepo_DeleteJob_Call{Call: _e.mock.On("DeleteJob", ctx, id)}
}

func (_c *MockIJobRepo_DeleteJob_Call) Run(run func(ctx context.Context, id string)) *MockIJobRepo_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIJobRepo_DeleteJob_Call) Return(_a0 error) *MockIJobRepo_DeleteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJobRepo_DeleteJob_Call) RunAndReturn(run func(context.Context, string) error) *MockIJobRepo_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: ctx, id
func (_m *MockIJobRepo) GetJob(ctx context.Context, id string) (*pgdb.Jobs, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *pgdb.Jobs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pgdb.Jobs, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pgdb.Jobs); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgdb.Jobs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJobRepo_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockIJobRepo_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIJobRepo_Expecter) GetJob(ctx interface{}, id interface{}) *MockIJobRepo_GetJob_Call {
	return &MockIJobRepo_GetJob_Call{Call: _e.mock.On("GetJob", ctx, id)}
}

func (_c *MockIJobRepo_GetJob_Call) Run(run func(ctx context.Context, id string)) *MockIJobRepo_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIJobRepo_GetJob_Call) Return(_a0 *pgdb.Jobs, _a1 error) *MockIJobRepo_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJobRepo_GetJob_Call) RunAndReturn(run func(context.Context, string) (*pgdb.Jobs, error)) *MockIJobRepo_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function with given fields: ctx
func (_m *MockIJobRepo) ListJobs(ctx context.Context) ([]pgdb.Jobs, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 []pgdb.Jobs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pgdb.Jobs, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pgdb.Jobs); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgdb.Jobs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJobRepo_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type MockIJobRepo_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIJobRepo_Expecter) ListJobs(ctx interface{}) *MockIJobRepo_ListJobs_Call {
	return &MockIJobRepo_ListJobs_Call{Call: _e.mock.On("ListJobs", ctx)}
}

func (_c *MockIJobRepo_ListJobs_Call) Run(run func(ctx context.Context)) *MockIJobRepo_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIJobRepo_ListJobs_Call) Return(_a0 []pgdb.Jobs, _a1 error) *MockIJobRepo_ListJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJobRepo_ListJobs_Call) RunAndReturn(run func(context.Context) ([]pgdb.Jobs, error)) *MockIJobRepo_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobsByState provides a mock function with given fields: ctx, jobState
func (_m *MockIJobRepo) ListJobsByState(ctx context.Context, jobState pgdb.JobState) ([]pgdb.Jobs, error) {
	ret := _m.Called(ctx, jobState)

	if len(ret) == 0 {
		panic("no return value specified for ListJobsByState")
	}

	var r0 []pgdb.Jobs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgdb.JobState) ([]pgdb.Jobs, error)); ok {
		return rf(ctx, jobState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgdb.JobState) []pgdb.Jobs); ok {
		r0 = rf(ctx, jobState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgdb.Jobs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgdb.JobState) error); ok {
		r1 = rf(ctx, jobState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJobRepo_ListJobsByState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobsByState'
type MockIJobRepo_ListJobsByState_Call struct {
	*mock.Call
}

// ListJobsByState is a helper method to define mock.On call
//   - ctx context.Context
//   - jobState pgdb.JobState
func (_e *MockIJobRepo_Expecter) ListJobsByState(ctx interface{}, jobState interface{}) *MockIJobRepo_ListJobsByState_Call {
	return &MockIJobRepo_ListJobsByState_Call{Call: _e.mock.On("ListJobsByState", ctx, jobState)}
}

func (_c *MockIJobRepo_ListJobsByState_Call) Run(run func(ctx context.Context, jobState pgdb.JobState)) *MockIJobRepo_ListJobsByState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgdb.JobState))
	})
	return _c
}

func (_c *MockIJobRepo_ListJobsByState_Call) Return(_a0 []pgdb.Jobs, _a1 error) *MockIJobRepo_ListJobsByState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJobRepo_ListJobsByState_Call) RunAndReturn(run func(context.Context, pgdb.JobState) ([]pgdb.Jobs, error)) *MockIJobRepo_ListJobsByState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function with given fields: ctx, req
func (_m *MockIJobRepo) UpdateJob(ctx context.Context, req model.JobUpdateRequest) (*pgdb.Jobs, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *pgdb.Jobs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.JobUpdateRequest) (*pgdb.Jobs, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.JobUpdateRequest) *pgdb.Jobs); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgdb.Jobs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.JobUpdateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJobRepo_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockIJobRepo_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.JobUpdateRequest
func (_e *MockIJobRepo_Expecter) UpdateJob(ctx interface{}, req interface{}) *MockIJobRepo_UpdateJob_Call {
	return &MockIJobRepo_UpdateJob_Call{Call: _e.mock.On("UpdateJob", ctx, req)}
}

func (_c *MockIJobRepo_UpdateJob_Call) Run(run func(ctx context.Context, req model.JobUpdateRequest)) *MockIJobRepo_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.JobUpdateRequest))
	})
	return _c
}

func (_c *MockIJobRepo_UpdateJob_Call) Return(_a0 *pgdb.Jobs, _a1 error) *MockIJobRepo_UpdateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJobRepo_UpdateJob_Call) RunAndReturn(run func(context.Context, model.JobUpdateRequest) (*pgdb.Jobs, error)) *MockIJobRepo_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJobRepo creates a new instance of MockIJobRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJobRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJobRepo {
	mock := &MockIJobRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
