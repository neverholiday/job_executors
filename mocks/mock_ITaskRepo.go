// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "job_executors/cmd/job_management_api/model"

	mock "github.com/stretchr/testify/mock"

	pgdb "job_executors/thirdparty/pgdb"
)

// MockITaskRepo is an autogenerated mock type for the ITaskRepo type
type MockITaskRepo struct {
	mock.Mock
}

type MockITaskRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITaskRepo) EXPECT() *MockITaskRepo_Expecter {
	return &MockITaskRepo_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, req
func (_m *MockITaskRepo) CreateTask(ctx context.Context, req model.TaskCreateRequest) ([]pgdb.Tasks, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 []pgdb.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskCreateRequest) ([]pgdb.Tasks, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskCreateRequest) []pgdb.Tasks); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgdb.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TaskCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockITaskRepo_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockITaskRepo_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.TaskCreateRequest
func (_e *MockITaskRepo_Expecter) CreateTask(ctx interface{}, req interface{}) *MockITaskRepo_CreateTask_Call {
	return &MockITaskRepo_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, req)}
}

func (_c *MockITaskRepo_CreateTask_Call) Run(run func(ctx context.Context, req model.TaskCreateRequest)) *MockITaskRepo_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.TaskCreateRequest))
	})
	return _c
}

func (_c *MockITaskRepo_CreateTask_Call) Return(_a0 []pgdb.Tasks, _a1 error) *MockITaskRepo_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITaskRepo_CreateTask_Call) RunAndReturn(run func(context.Context, model.TaskCreateRequest) ([]pgdb.Tasks, error)) *MockITaskRepo_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, jobID
func (_m *MockITaskRepo) DeleteTask(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockITaskRepo_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockITaskRepo_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockITaskRepo_Expecter) DeleteTask(ctx interface{}, jobID interface{}) *MockITaskRepo_DeleteTask_Call {
	return &MockITaskRepo_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, jobID)}
}

func (_c *MockITaskRepo_DeleteTask_Call) Run(run func(ctx context.Context, jobID string)) *MockITaskRepo_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockITaskRepo_DeleteTask_Call) Return(_a0 error) *MockITaskRepo_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITaskRepo_DeleteTask_Call) RunAndReturn(run func(context.Context, string) error) *MockITaskRepo_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, req
func (_m *MockITaskRepo) UpdateTask(ctx context.Context, req model.JobUpdateRequest) (*pgdb.Tasks, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *pgdb.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.JobUpdateRequest) (*pgdb.Tasks, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.JobUpdateRequest) *pgdb.Tasks); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgdb.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.JobUpdateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockITaskRepo_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockITaskRepo_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.JobUpdateRequest
func (_e *MockITaskRepo_Expecter) UpdateTask(ctx interface{}, req interface{}) *MockITaskRepo_UpdateTask_Call {
	return &MockITaskRepo_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, req)}
}

func (_c *MockITaskRepo_UpdateTask_Call) Run(run func(ctx context.Context, req model.JobUpdateRequest)) *MockITaskRepo_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.JobUpdateRequest))
	})
	return _c
}

func (_c *MockITaskRepo_UpdateTask_Call) Return(_a0 *pgdb.Tasks, _a1 error) *MockITaskRepo_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITaskRepo_UpdateTask_Call) RunAndReturn(run func(context.Context, model.JobUpdateRequest) (*pgdb.Tasks, error)) *MockITaskRepo_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITaskRepo creates a new instance of MockITaskRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITaskRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITaskRepo {
	mock := &MockITaskRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
